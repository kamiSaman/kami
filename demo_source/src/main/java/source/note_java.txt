1、 根据Student.age对List<Persion>Persion进行排序：
	Collections.sort(personList,new Comparator<Person>() {
		public int compare(Person o1, Person o2) {
			if(o1.getAge()>o2.getAge())
				return 1;
			else if (o1.getAge() == o2.getAge())
				return 0;
			else 
				return -1;
		}
    });

	注：Comparator为接口，【new Comparator<Person>()】是因为该参数为匿名内部类，方法名已省略，实际过程为：实现Comparator接口——>new 匿名内部类-->内部类名隐藏
	
2、函数式接口：只有一个方法的接口
	1> 例：Comparator，boolean equals(Object obj);equals为Object的方法，不算入内
		1> 函数式接口只有一个抽象方法
		2> default方法某默认实现，不属于抽象方法
		3> 接口重写了Object的公共方法也不算入内（签名相同）
		
	2> @FunctionalInterface:避免在这个接口中增加接口函数导致其有多个接口函数需要被实现，变成"非函数接口”，我们可以在这个上面加上一个声明@FunctionalInterface	
		例：
			@FunctionalInterface
			interface MyLambdaInterface(
				void doSomeShit(String s);
			)
		
		
3、接口的默认方法：（java8新特性）在接口中添加一个非抽象的方法实现，而这样做的方法只需要使用关键字default修饰该默认实现方法即可。该特性又叫扩展方法
	例：
		public interface Formula {
			double calculate(int a);
			default double sqrt(int a){
				return Math.sqrt(a);
			}
		}

4、Lambda解析：（java8新特性）
	1> 作用： 简化、优雅代码；
			1)可用于优化函数式接口函数,这样lambda表达式就有了类型，可作为参数传给函数；
			2)方法引用，方法引用可以使代码更加简单和便捷

	2> 过程：
		简化前：
			aBlockOfCode = public void doSomeShit(String s){
				system.out.println(s);
			}
		简化后：
			aBlockOfCode = (s) -> system.out.println(s);
	3> 函数式接口
		Function：提供任意一种类型的参数，返回另外一个任意类型返回值。 R apply(T t);
		Consumer：提供任意一种类型的参数，返回空值。 void accept(T t);
		Supplier：参数为空，得到任意一种类型的返回值。T get();
		Predicate：提供任意一种类型的参数，返回boolean返回值。boolean test(T t);
	4> 

	资料：https://www.zhihu.com/question/20125256/answer/324121308

5、lombok注解:
	添加功能步骤：下载安装相关插件,下载导入jar包
	1> @Data:为类的所有属性自动生成setter/getter、equals、canEqual、hashCode、toString方法,若为final属性，则不会为该属性生成setter方法
	2> @Getter/@Setter：生成Getter/Setter方法
	3> @NonNull:该注解用在属性或构造器上，Lombok会生成一个非空的声明，可用于校验参数，能帮助避免空指针	
	4> @Cleanup:自动调用close()方法,例如：InputStream、OutputStream 
	5> @NoArgsConstructor:无参构造器
	6> @RequiredArgsConstructor:部分参数构造器
	7> @AllArgsConstructor:全参构造器,Lombok没法实现多种参数构造器的重载。
6、jdk11		生成jre
	bin\jlink.exe --module-path jmods --add-modules java.desktop --output jre
	bin\jlink.exe --module-path jmods --add-modules java.desktop,java.sql,java.compiler --output jre1
	bin\jlink.exe --module-path jmods --add-modules
	java.base,java.compiler,java.datatransfer,java.desktop,java.instrument,java.logging,java.management,
		java.management.rmi,java.naming,java.net.http,java.prefs,java.rmi,java.scripting,java.se,java.security.jgss,
		java.security.sasl,java.sql,java.sql.rowset,java.transaction.xa,java.xml,java.xml.crypto,jdk.accessibility,
		jdk.attach,jdk.compiler,jdk.dynalink,jdk.httpserver,jdk.jartool,jdk.javadoc,jdk.jcmd,jdk.jconsole,jdk.jdi,
		jdk.jdwp.agent,jdk.jfr,jdk.jshell,jdk.jsobject,jdk.management,jdk.management.agent,jdk.management.jfr,jdk.net,
		jdk.scripting.nashorn,jdk.sctp,jdk.security.auth,jdk.security.jgss
		--output jre

7、jdk11 模块
	https://docs.oracle.com/en/java/javase/11/docs/api/index.html
8、方法的命名：动词+宾语
9、classpath路径
	1> src路径下的文件在编译后会放到WEB-INF/clases路径下吧。默认的classpath是在这里。直接放到WEB-INF下的话，
	2> 用maven构建项目时候resource目录就是默认的classpath,java文件编译之后的class文件的编译目录一般为web-inf/classes,src下的xml在编译时也会复制到classPath  
	3> classpath: 与classpath*:的区别:
		classpath：只会到你的class路径中查找找文件; 
		classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找
	4> 
		"**/" 表示的是任意目录； 
		"**/applicationContext-*.xml"  表示任意目录下的以"applicationContext-"开头的XML文件。	
10、
1、
1、































